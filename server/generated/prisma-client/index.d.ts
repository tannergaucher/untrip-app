// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  emailSubscriber: (where?: EmailSubscriberWhereInput) => Promise<boolean>;
  list: (where?: ListWhereInput) => Promise<boolean>;
  listPlace: (where?: ListPlaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  emailSubscriber: (
    where: EmailSubscriberWhereUniqueInput
  ) => EmailSubscriberNullablePromise;
  emailSubscribers: (args?: {
    where?: EmailSubscriberWhereInput;
    orderBy?: EmailSubscriberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EmailSubscriber>;
  emailSubscribersConnection: (args?: {
    where?: EmailSubscriberWhereInput;
    orderBy?: EmailSubscriberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailSubscriberConnectionPromise;
  list: (where: ListWhereUniqueInput) => ListNullablePromise;
  lists: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<List>;
  listsConnection: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListConnectionPromise;
  listPlace: (where: ListPlaceWhereUniqueInput) => ListPlaceNullablePromise;
  listPlaces: (args?: {
    where?: ListPlaceWhereInput;
    orderBy?: ListPlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ListPlace>;
  listPlacesConnection: (args?: {
    where?: ListPlaceWhereInput;
    orderBy?: ListPlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListPlaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createEmailSubscriber: (
    data: EmailSubscriberCreateInput
  ) => EmailSubscriberPromise;
  updateEmailSubscriber: (args: {
    data: EmailSubscriberUpdateInput;
    where: EmailSubscriberWhereUniqueInput;
  }) => EmailSubscriberPromise;
  updateManyEmailSubscribers: (args: {
    data: EmailSubscriberUpdateManyMutationInput;
    where?: EmailSubscriberWhereInput;
  }) => BatchPayloadPromise;
  upsertEmailSubscriber: (args: {
    where: EmailSubscriberWhereUniqueInput;
    create: EmailSubscriberCreateInput;
    update: EmailSubscriberUpdateInput;
  }) => EmailSubscriberPromise;
  deleteEmailSubscriber: (
    where: EmailSubscriberWhereUniqueInput
  ) => EmailSubscriberPromise;
  deleteManyEmailSubscribers: (
    where?: EmailSubscriberWhereInput
  ) => BatchPayloadPromise;
  createList: (data: ListCreateInput) => ListPromise;
  updateList: (args: {
    data: ListUpdateInput;
    where: ListWhereUniqueInput;
  }) => ListPromise;
  updateManyLists: (args: {
    data: ListUpdateManyMutationInput;
    where?: ListWhereInput;
  }) => BatchPayloadPromise;
  upsertList: (args: {
    where: ListWhereUniqueInput;
    create: ListCreateInput;
    update: ListUpdateInput;
  }) => ListPromise;
  deleteList: (where: ListWhereUniqueInput) => ListPromise;
  deleteManyLists: (where?: ListWhereInput) => BatchPayloadPromise;
  createListPlace: (data: ListPlaceCreateInput) => ListPlacePromise;
  updateListPlace: (args: {
    data: ListPlaceUpdateInput;
    where: ListPlaceWhereUniqueInput;
  }) => ListPlacePromise;
  updateManyListPlaces: (args: {
    data: ListPlaceUpdateManyMutationInput;
    where?: ListPlaceWhereInput;
  }) => BatchPayloadPromise;
  upsertListPlace: (args: {
    where: ListPlaceWhereUniqueInput;
    create: ListPlaceCreateInput;
    update: ListPlaceUpdateInput;
  }) => ListPlacePromise;
  deleteListPlace: (where: ListPlaceWhereUniqueInput) => ListPlacePromise;
  deleteManyListPlaces: (where?: ListPlaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  emailSubscriber: (
    where?: EmailSubscriberSubscriptionWhereInput
  ) => EmailSubscriberSubscriptionPayloadSubscription;
  list: (
    where?: ListSubscriptionWhereInput
  ) => ListSubscriptionPayloadSubscription;
  listPlace: (
    where?: ListPlaceSubscriptionWhereInput
  ) => ListPlaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type ListPlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sanityId_ASC"
  | "sanityId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "sanityPostId_ASC"
  | "sanityPostId_DESC"
  | "claps_ASC"
  | "claps_DESC";

export type EmailSubscriberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isEmailSubscriber_ASC"
  | "isEmailSubscriber_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  places_every?: Maybe<ListPlaceWhereInput>;
  places_some?: Maybe<ListPlaceWhereInput>;
  places_none?: Maybe<ListPlaceWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ListWhereInput[] | ListWhereInput>;
  OR?: Maybe<ListWhereInput[] | ListWhereInput>;
  NOT?: Maybe<ListWhereInput[] | ListWhereInput>;
}

export interface ListPlaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  sanityId_not?: Maybe<String>;
  sanityId_in?: Maybe<String[] | String>;
  sanityId_not_in?: Maybe<String[] | String>;
  sanityId_lt?: Maybe<String>;
  sanityId_lte?: Maybe<String>;
  sanityId_gt?: Maybe<String>;
  sanityId_gte?: Maybe<String>;
  sanityId_contains?: Maybe<String>;
  sanityId_not_contains?: Maybe<String>;
  sanityId_starts_with?: Maybe<String>;
  sanityId_not_starts_with?: Maybe<String>;
  sanityId_ends_with?: Maybe<String>;
  sanityId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  list?: Maybe<ListWhereInput>;
  AND?: Maybe<ListPlaceWhereInput[] | ListPlaceWhereInput>;
  OR?: Maybe<ListPlaceWhereInput[] | ListPlaceWhereInput>;
  NOT?: Maybe<ListPlaceWhereInput[] | ListPlaceWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
  isEmailSubscriber_not?: Maybe<Boolean>;
  lists_every?: Maybe<ListWhereInput>;
  lists_some?: Maybe<ListWhereInput>;
  lists_none?: Maybe<ListWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  sanityPostId?: Maybe<String>;
  sanityPostId_not?: Maybe<String>;
  sanityPostId_in?: Maybe<String[] | String>;
  sanityPostId_not_in?: Maybe<String[] | String>;
  sanityPostId_lt?: Maybe<String>;
  sanityPostId_lte?: Maybe<String>;
  sanityPostId_gt?: Maybe<String>;
  sanityPostId_gte?: Maybe<String>;
  sanityPostId_contains?: Maybe<String>;
  sanityPostId_not_contains?: Maybe<String>;
  sanityPostId_starts_with?: Maybe<String>;
  sanityPostId_not_starts_with?: Maybe<String>;
  sanityPostId_ends_with?: Maybe<String>;
  sanityPostId_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  claps?: Maybe<Int>;
  claps_not?: Maybe<Int>;
  claps_in?: Maybe<Int[] | Int>;
  claps_not_in?: Maybe<Int[] | Int>;
  claps_lt?: Maybe<Int>;
  claps_lte?: Maybe<Int>;
  claps_gt?: Maybe<Int>;
  claps_gte?: Maybe<Int>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export type EmailSubscriberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmailSubscriberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
  OR?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
  NOT?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
}

export type ListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ListPlaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  sanityPostId: String;
  author: UserCreateOneInput;
  claps?: Maybe<Int>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  isEmailSubscriber?: Maybe<Boolean>;
  lists?: Maybe<ListCreateManyWithoutUserInput>;
}

export interface ListCreateManyWithoutUserInput {
  create?: Maybe<ListCreateWithoutUserInput[] | ListCreateWithoutUserInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
}

export interface ListCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  places?: Maybe<ListPlaceCreateManyWithoutListInput>;
}

export interface ListPlaceCreateManyWithoutListInput {
  create?: Maybe<
    ListPlaceCreateWithoutListInput[] | ListPlaceCreateWithoutListInput
  >;
  connect?: Maybe<ListPlaceWhereUniqueInput[] | ListPlaceWhereUniqueInput>;
}

export interface ListPlaceCreateWithoutListInput {
  id?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  sanityPostId?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  claps?: Maybe<Int>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
  lists?: Maybe<ListUpdateManyWithoutUserInput>;
}

export interface ListUpdateManyWithoutUserInput {
  create?: Maybe<ListCreateWithoutUserInput[] | ListCreateWithoutUserInput>;
  delete?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  set?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  disconnect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  update?: Maybe<
    | ListUpdateWithWhereUniqueWithoutUserInput[]
    | ListUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ListUpsertWithWhereUniqueWithoutUserInput[]
    | ListUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  updateMany?: Maybe<
    ListUpdateManyWithWhereNestedInput[] | ListUpdateManyWithWhereNestedInput
  >;
}

export interface ListUpdateWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput;
  data: ListUpdateWithoutUserDataInput;
}

export interface ListUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  places?: Maybe<ListPlaceUpdateManyWithoutListInput>;
}

export interface ListPlaceUpdateManyWithoutListInput {
  create?: Maybe<
    ListPlaceCreateWithoutListInput[] | ListPlaceCreateWithoutListInput
  >;
  delete?: Maybe<ListPlaceWhereUniqueInput[] | ListPlaceWhereUniqueInput>;
  connect?: Maybe<ListPlaceWhereUniqueInput[] | ListPlaceWhereUniqueInput>;
  set?: Maybe<ListPlaceWhereUniqueInput[] | ListPlaceWhereUniqueInput>;
  disconnect?: Maybe<ListPlaceWhereUniqueInput[] | ListPlaceWhereUniqueInput>;
  update?: Maybe<
    | ListPlaceUpdateWithWhereUniqueWithoutListInput[]
    | ListPlaceUpdateWithWhereUniqueWithoutListInput
  >;
  upsert?: Maybe<
    | ListPlaceUpsertWithWhereUniqueWithoutListInput[]
    | ListPlaceUpsertWithWhereUniqueWithoutListInput
  >;
  deleteMany?: Maybe<ListPlaceScalarWhereInput[] | ListPlaceScalarWhereInput>;
  updateMany?: Maybe<
    | ListPlaceUpdateManyWithWhereNestedInput[]
    | ListPlaceUpdateManyWithWhereNestedInput
  >;
}

export interface ListPlaceUpdateWithWhereUniqueWithoutListInput {
  where: ListPlaceWhereUniqueInput;
  data: ListPlaceUpdateWithoutListDataInput;
}

export interface ListPlaceUpdateWithoutListDataInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface ListPlaceUpsertWithWhereUniqueWithoutListInput {
  where: ListPlaceWhereUniqueInput;
  update: ListPlaceUpdateWithoutListDataInput;
  create: ListPlaceCreateWithoutListInput;
}

export interface ListPlaceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  sanityId_not?: Maybe<String>;
  sanityId_in?: Maybe<String[] | String>;
  sanityId_not_in?: Maybe<String[] | String>;
  sanityId_lt?: Maybe<String>;
  sanityId_lte?: Maybe<String>;
  sanityId_gt?: Maybe<String>;
  sanityId_gte?: Maybe<String>;
  sanityId_contains?: Maybe<String>;
  sanityId_not_contains?: Maybe<String>;
  sanityId_starts_with?: Maybe<String>;
  sanityId_not_starts_with?: Maybe<String>;
  sanityId_ends_with?: Maybe<String>;
  sanityId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  AND?: Maybe<ListPlaceScalarWhereInput[] | ListPlaceScalarWhereInput>;
  OR?: Maybe<ListPlaceScalarWhereInput[] | ListPlaceScalarWhereInput>;
  NOT?: Maybe<ListPlaceScalarWhereInput[] | ListPlaceScalarWhereInput>;
}

export interface ListPlaceUpdateManyWithWhereNestedInput {
  where: ListPlaceScalarWhereInput;
  data: ListPlaceUpdateManyDataInput;
}

export interface ListPlaceUpdateManyDataInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface ListUpsertWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput;
  update: ListUpdateWithoutUserDataInput;
  create: ListCreateWithoutUserInput;
}

export interface ListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  OR?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  NOT?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
}

export interface ListUpdateManyWithWhereNestedInput {
  where: ListScalarWhereInput;
  data: ListUpdateManyDataInput;
}

export interface ListUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
  sanityPostId?: Maybe<String>;
  claps?: Maybe<Int>;
}

export interface EmailSubscriberCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
}

export interface EmailSubscriberUpdateInput {
  email?: Maybe<String>;
}

export interface EmailSubscriberUpdateManyMutationInput {
  email?: Maybe<String>;
}

export interface ListCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  places?: Maybe<ListPlaceCreateManyWithoutListInput>;
  user: UserCreateOneWithoutListsInput;
}

export interface UserCreateOneWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutListsInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface ListUpdateInput {
  title?: Maybe<String>;
  places?: Maybe<ListPlaceUpdateManyWithoutListInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
}

export interface UserUpdateOneRequiredWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  update?: Maybe<UserUpdateWithoutListsDataInput>;
  upsert?: Maybe<UserUpsertWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutListsDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface UserUpsertWithoutListsInput {
  update: UserUpdateWithoutListsDataInput;
  create: UserCreateWithoutListsInput;
}

export interface ListUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface ListPlaceCreateInput {
  id?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  list?: Maybe<ListCreateOneWithoutPlacesInput>;
}

export interface ListCreateOneWithoutPlacesInput {
  create?: Maybe<ListCreateWithoutPlacesInput>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface ListCreateWithoutPlacesInput {
  id?: Maybe<ID_Input>;
  title: String;
  user: UserCreateOneWithoutListsInput;
}

export interface ListPlaceUpdateInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  list?: Maybe<ListUpdateOneWithoutPlacesInput>;
}

export interface ListUpdateOneWithoutPlacesInput {
  create?: Maybe<ListCreateWithoutPlacesInput>;
  update?: Maybe<ListUpdateWithoutPlacesDataInput>;
  upsert?: Maybe<ListUpsertWithoutPlacesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface ListUpdateWithoutPlacesDataInput {
  title?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
}

export interface ListUpsertWithoutPlacesInput {
  update: ListUpdateWithoutPlacesDataInput;
  create: ListCreateWithoutPlacesInput;
}

export interface ListPlaceUpdateManyMutationInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
  lists?: Maybe<ListUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface EmailSubscriberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailSubscriberWhereInput>;
  AND?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
  OR?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
}

export interface ListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListWhereInput>;
  AND?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  OR?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  NOT?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
}

export interface ListPlaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListPlaceWhereInput>;
  AND?: Maybe<
    ListPlaceSubscriptionWhereInput[] | ListPlaceSubscriptionWhereInput
  >;
  OR?: Maybe<
    ListPlaceSubscriptionWhereInput[] | ListPlaceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ListPlaceSubscriptionWhereInput[] | ListPlaceSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  text: String;
  sanityPostId: String;
  claps?: Int;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sanityPostId: () => Promise<String>;
  author: <T = UserPromise>() => T;
  claps: () => Promise<Int>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  sanityPostId: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  claps: () => Promise<AsyncIterator<Int>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sanityPostId: () => Promise<String>;
  author: <T = UserPromise>() => T;
  claps: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  isEmailSubscriber?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isEmailSubscriber: () => Promise<AsyncIterator<Boolean>>;
  lists: <T = Promise<AsyncIterator<ListSubscription>>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface List {
  id: ID_Output;
  title: String;
}

export interface ListPromise extends Promise<List>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  places: <T = FragmentableArray<ListPlace>>(args?: {
    where?: ListPlaceWhereInput;
    orderBy?: ListPlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface ListSubscription
  extends Promise<AsyncIterator<List>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  places: <T = Promise<AsyncIterator<ListPlaceSubscription>>>(args?: {
    where?: ListPlaceWhereInput;
    orderBy?: ListPlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface ListNullablePromise
  extends Promise<List | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  places: <T = FragmentableArray<ListPlace>>(args?: {
    where?: ListPlaceWhereInput;
    orderBy?: ListPlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface ListPlace {
  id: ID_Output;
  sanityId?: String;
  name?: String;
  imageUrl?: String;
  slug?: String;
  lat?: Float;
  lng?: Float;
}

export interface ListPlacePromise extends Promise<ListPlace>, Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  list: <T = ListPromise>() => T;
}

export interface ListPlaceSubscription
  extends Promise<AsyncIterator<ListPlace>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sanityId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  list: <T = ListSubscription>() => T;
}

export interface ListPlaceNullablePromise
  extends Promise<ListPlace | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  list: <T = ListPromise>() => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailSubscriber {
  id: ID_Output;
  email: String;
}

export interface EmailSubscriberPromise
  extends Promise<EmailSubscriber>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberSubscription
  extends Promise<AsyncIterator<EmailSubscriber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriberNullablePromise
  extends Promise<EmailSubscriber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberConnection {
  pageInfo: PageInfo;
  edges: EmailSubscriberEdge[];
}

export interface EmailSubscriberConnectionPromise
  extends Promise<EmailSubscriberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailSubscriberEdge>>() => T;
  aggregate: <T = AggregateEmailSubscriberPromise>() => T;
}

export interface EmailSubscriberConnectionSubscription
  extends Promise<AsyncIterator<EmailSubscriberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailSubscriberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscriberSubscription>() => T;
}

export interface EmailSubscriberEdge {
  node: EmailSubscriber;
  cursor: String;
}

export interface EmailSubscriberEdgePromise
  extends Promise<EmailSubscriberEdge>,
    Fragmentable {
  node: <T = EmailSubscriberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailSubscriberEdgeSubscription
  extends Promise<AsyncIterator<EmailSubscriberEdge>>,
    Fragmentable {
  node: <T = EmailSubscriberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmailSubscriber {
  count: Int;
}

export interface AggregateEmailSubscriberPromise
  extends Promise<AggregateEmailSubscriber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscriberSubscription
  extends Promise<AsyncIterator<AggregateEmailSubscriber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ListConnection {
  pageInfo: PageInfo;
  edges: ListEdge[];
}

export interface ListConnectionPromise
  extends Promise<ListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListEdge>>() => T;
  aggregate: <T = AggregateListPromise>() => T;
}

export interface ListConnectionSubscription
  extends Promise<AsyncIterator<ListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListSubscription>() => T;
}

export interface ListEdge {
  node: List;
  cursor: String;
}

export interface ListEdgePromise extends Promise<ListEdge>, Fragmentable {
  node: <T = ListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListEdgeSubscription
  extends Promise<AsyncIterator<ListEdge>>,
    Fragmentable {
  node: <T = ListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateList {
  count: Int;
}

export interface AggregateListPromise
  extends Promise<AggregateList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListSubscription
  extends Promise<AsyncIterator<AggregateList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ListPlaceConnection {
  pageInfo: PageInfo;
  edges: ListPlaceEdge[];
}

export interface ListPlaceConnectionPromise
  extends Promise<ListPlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListPlaceEdge>>() => T;
  aggregate: <T = AggregateListPlacePromise>() => T;
}

export interface ListPlaceConnectionSubscription
  extends Promise<AsyncIterator<ListPlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListPlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListPlaceSubscription>() => T;
}

export interface ListPlaceEdge {
  node: ListPlace;
  cursor: String;
}

export interface ListPlaceEdgePromise
  extends Promise<ListPlaceEdge>,
    Fragmentable {
  node: <T = ListPlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListPlaceEdgeSubscription
  extends Promise<AsyncIterator<ListPlaceEdge>>,
    Fragmentable {
  node: <T = ListPlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateListPlace {
  count: Int;
}

export interface AggregateListPlacePromise
  extends Promise<AggregateListPlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListPlaceSubscription
  extends Promise<AsyncIterator<AggregateListPlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
  text: String;
  sanityPostId: String;
  claps?: Int;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sanityPostId: () => Promise<String>;
  claps: () => Promise<Int>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  sanityPostId: () => Promise<AsyncIterator<String>>;
  claps: () => Promise<AsyncIterator<Int>>;
}

export interface EmailSubscriberSubscriptionPayload {
  mutation: MutationType;
  node: EmailSubscriber;
  updatedFields: String[];
  previousValues: EmailSubscriberPreviousValues;
}

export interface EmailSubscriberSubscriptionPayloadPromise
  extends Promise<EmailSubscriberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailSubscriberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailSubscriberPreviousValuesPromise>() => T;
}

export interface EmailSubscriberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscriberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailSubscriberPreviousValuesSubscription>() => T;
}

export interface EmailSubscriberPreviousValues {
  id: ID_Output;
  email: String;
}

export interface EmailSubscriberPreviousValuesPromise
  extends Promise<EmailSubscriberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailSubscriberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ListSubscriptionPayload {
  mutation: MutationType;
  node: List;
  updatedFields: String[];
  previousValues: ListPreviousValues;
}

export interface ListSubscriptionPayloadPromise
  extends Promise<ListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListPreviousValuesPromise>() => T;
}

export interface ListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListPreviousValuesSubscription>() => T;
}

export interface ListPreviousValues {
  id: ID_Output;
  title: String;
}

export interface ListPreviousValuesPromise
  extends Promise<ListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ListPreviousValuesSubscription
  extends Promise<AsyncIterator<ListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ListPlaceSubscriptionPayload {
  mutation: MutationType;
  node: ListPlace;
  updatedFields: String[];
  previousValues: ListPlacePreviousValues;
}

export interface ListPlaceSubscriptionPayloadPromise
  extends Promise<ListPlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListPlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListPlacePreviousValuesPromise>() => T;
}

export interface ListPlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListPlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListPlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListPlacePreviousValuesSubscription>() => T;
}

export interface ListPlacePreviousValues {
  id: ID_Output;
  sanityId?: String;
  name?: String;
  imageUrl?: String;
  slug?: String;
  lat?: Float;
  lng?: Float;
}

export interface ListPlacePreviousValuesPromise
  extends Promise<ListPlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface ListPlacePreviousValuesSubscription
  extends Promise<AsyncIterator<ListPlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sanityId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  isEmailSubscriber?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isEmailSubscriber: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "List",
    embedded: false
  },
  {
    name: "ListPlace",
    embedded: false
  },
  {
    name: "EmailSubscriber",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
