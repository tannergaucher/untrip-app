// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  emailSubscriber: (where?: EmailSubscriberWhereInput) => Promise<boolean>;
  list: (where?: ListWhereInput) => Promise<boolean>;
  place: (where?: PlaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  emailSubscriber: (
    where: EmailSubscriberWhereUniqueInput
  ) => EmailSubscriberNullablePromise;
  emailSubscribers: (args?: {
    where?: EmailSubscriberWhereInput;
    orderBy?: EmailSubscriberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EmailSubscriber>;
  emailSubscribersConnection: (args?: {
    where?: EmailSubscriberWhereInput;
    orderBy?: EmailSubscriberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailSubscriberConnectionPromise;
  list: (where: ListWhereUniqueInput) => ListNullablePromise;
  lists: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<List>;
  listsConnection: (args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListConnectionPromise;
  place: (where: PlaceWhereUniqueInput) => PlaceNullablePromise;
  places: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Place>;
  placesConnection: (args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmailSubscriber: (
    data: EmailSubscriberCreateInput
  ) => EmailSubscriberPromise;
  updateEmailSubscriber: (args: {
    data: EmailSubscriberUpdateInput;
    where: EmailSubscriberWhereUniqueInput;
  }) => EmailSubscriberPromise;
  updateManyEmailSubscribers: (args: {
    data: EmailSubscriberUpdateManyMutationInput;
    where?: EmailSubscriberWhereInput;
  }) => BatchPayloadPromise;
  upsertEmailSubscriber: (args: {
    where: EmailSubscriberWhereUniqueInput;
    create: EmailSubscriberCreateInput;
    update: EmailSubscriberUpdateInput;
  }) => EmailSubscriberPromise;
  deleteEmailSubscriber: (
    where: EmailSubscriberWhereUniqueInput
  ) => EmailSubscriberPromise;
  deleteManyEmailSubscribers: (
    where?: EmailSubscriberWhereInput
  ) => BatchPayloadPromise;
  createList: (data: ListCreateInput) => ListPromise;
  updateList: (args: {
    data: ListUpdateInput;
    where: ListWhereUniqueInput;
  }) => ListPromise;
  updateManyLists: (args: {
    data: ListUpdateManyMutationInput;
    where?: ListWhereInput;
  }) => BatchPayloadPromise;
  upsertList: (args: {
    where: ListWhereUniqueInput;
    create: ListCreateInput;
    update: ListUpdateInput;
  }) => ListPromise;
  deleteList: (where: ListWhereUniqueInput) => ListPromise;
  deleteManyLists: (where?: ListWhereInput) => BatchPayloadPromise;
  createPlace: (data: PlaceCreateInput) => PlacePromise;
  updatePlace: (args: {
    data: PlaceUpdateInput;
    where: PlaceWhereUniqueInput;
  }) => PlacePromise;
  updateManyPlaces: (args: {
    data: PlaceUpdateManyMutationInput;
    where?: PlaceWhereInput;
  }) => BatchPayloadPromise;
  upsertPlace: (args: {
    where: PlaceWhereUniqueInput;
    create: PlaceCreateInput;
    update: PlaceUpdateInput;
  }) => PlacePromise;
  deletePlace: (where: PlaceWhereUniqueInput) => PlacePromise;
  deleteManyPlaces: (where?: PlaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  emailSubscriber: (
    where?: EmailSubscriberSubscriptionWhereInput
  ) => EmailSubscriberSubscriptionPayloadSubscription;
  list: (
    where?: ListSubscriptionWhereInput
  ) => ListSubscriptionPayloadSubscription;
  place: (
    where?: PlaceSubscriptionWhereInput
  ) => PlaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EmailSubscriberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC";

export type PlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sanityId_ASC"
  | "sanityId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC";

export type ListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "isEmailSubscriber_ASC"
  | "isEmailSubscriber_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EmailSubscriberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmailSubscriberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
  OR?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
  NOT?: Maybe<EmailSubscriberWhereInput[] | EmailSubscriberWhereInput>;
}

export type ListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  sanityId_not?: Maybe<String>;
  sanityId_in?: Maybe<String[] | String>;
  sanityId_not_in?: Maybe<String[] | String>;
  sanityId_lt?: Maybe<String>;
  sanityId_lte?: Maybe<String>;
  sanityId_gt?: Maybe<String>;
  sanityId_gte?: Maybe<String>;
  sanityId_contains?: Maybe<String>;
  sanityId_not_contains?: Maybe<String>;
  sanityId_starts_with?: Maybe<String>;
  sanityId_not_starts_with?: Maybe<String>;
  sanityId_ends_with?: Maybe<String>;
  sanityId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  list?: Maybe<ListWhereInput>;
  AND?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
  OR?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
  NOT?: Maybe<PlaceWhereInput[] | PlaceWhereInput>;
}

export interface ListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  places_every?: Maybe<PlaceWhereInput>;
  places_some?: Maybe<PlaceWhereInput>;
  places_none?: Maybe<PlaceWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ListWhereInput[] | ListWhereInput>;
  OR?: Maybe<ListWhereInput[] | ListWhereInput>;
  NOT?: Maybe<ListWhereInput[] | ListWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
  isEmailSubscriber_not?: Maybe<Boolean>;
  lists_every?: Maybe<ListWhereInput>;
  lists_some?: Maybe<ListWhereInput>;
  lists_none?: Maybe<ListWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type PlaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmailSubscriberCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
}

export interface EmailSubscriberUpdateInput {
  email?: Maybe<String>;
}

export interface EmailSubscriberUpdateManyMutationInput {
  email?: Maybe<String>;
}

export interface ListCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  places?: Maybe<PlaceCreateManyWithoutListInput>;
  user: UserCreateOneWithoutListsInput;
}

export interface PlaceCreateManyWithoutListInput {
  create?: Maybe<PlaceCreateWithoutListInput[] | PlaceCreateWithoutListInput>;
  connect?: Maybe<PlaceWhereUniqueInput[] | PlaceWhereUniqueInput>;
}

export interface PlaceCreateWithoutListInput {
  id?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface UserCreateOneWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutListsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface ListUpdateInput {
  title?: Maybe<String>;
  places?: Maybe<PlaceUpdateManyWithoutListInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
}

export interface PlaceUpdateManyWithoutListInput {
  create?: Maybe<PlaceCreateWithoutListInput[] | PlaceCreateWithoutListInput>;
  delete?: Maybe<PlaceWhereUniqueInput[] | PlaceWhereUniqueInput>;
  connect?: Maybe<PlaceWhereUniqueInput[] | PlaceWhereUniqueInput>;
  set?: Maybe<PlaceWhereUniqueInput[] | PlaceWhereUniqueInput>;
  disconnect?: Maybe<PlaceWhereUniqueInput[] | PlaceWhereUniqueInput>;
  update?: Maybe<
    | PlaceUpdateWithWhereUniqueWithoutListInput[]
    | PlaceUpdateWithWhereUniqueWithoutListInput
  >;
  upsert?: Maybe<
    | PlaceUpsertWithWhereUniqueWithoutListInput[]
    | PlaceUpsertWithWhereUniqueWithoutListInput
  >;
  deleteMany?: Maybe<PlaceScalarWhereInput[] | PlaceScalarWhereInput>;
  updateMany?: Maybe<
    PlaceUpdateManyWithWhereNestedInput[] | PlaceUpdateManyWithWhereNestedInput
  >;
}

export interface PlaceUpdateWithWhereUniqueWithoutListInput {
  where: PlaceWhereUniqueInput;
  data: PlaceUpdateWithoutListDataInput;
}

export interface PlaceUpdateWithoutListDataInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface PlaceUpsertWithWhereUniqueWithoutListInput {
  where: PlaceWhereUniqueInput;
  update: PlaceUpdateWithoutListDataInput;
  create: PlaceCreateWithoutListInput;
}

export interface PlaceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  sanityId_not?: Maybe<String>;
  sanityId_in?: Maybe<String[] | String>;
  sanityId_not_in?: Maybe<String[] | String>;
  sanityId_lt?: Maybe<String>;
  sanityId_lte?: Maybe<String>;
  sanityId_gt?: Maybe<String>;
  sanityId_gte?: Maybe<String>;
  sanityId_contains?: Maybe<String>;
  sanityId_not_contains?: Maybe<String>;
  sanityId_starts_with?: Maybe<String>;
  sanityId_not_starts_with?: Maybe<String>;
  sanityId_ends_with?: Maybe<String>;
  sanityId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  lat?: Maybe<Float>;
  lat_not?: Maybe<Float>;
  lat_in?: Maybe<Float[] | Float>;
  lat_not_in?: Maybe<Float[] | Float>;
  lat_lt?: Maybe<Float>;
  lat_lte?: Maybe<Float>;
  lat_gt?: Maybe<Float>;
  lat_gte?: Maybe<Float>;
  lng?: Maybe<Float>;
  lng_not?: Maybe<Float>;
  lng_in?: Maybe<Float[] | Float>;
  lng_not_in?: Maybe<Float[] | Float>;
  lng_lt?: Maybe<Float>;
  lng_lte?: Maybe<Float>;
  lng_gt?: Maybe<Float>;
  lng_gte?: Maybe<Float>;
  AND?: Maybe<PlaceScalarWhereInput[] | PlaceScalarWhereInput>;
  OR?: Maybe<PlaceScalarWhereInput[] | PlaceScalarWhereInput>;
  NOT?: Maybe<PlaceScalarWhereInput[] | PlaceScalarWhereInput>;
}

export interface PlaceUpdateManyWithWhereNestedInput {
  where: PlaceScalarWhereInput;
  data: PlaceUpdateManyDataInput;
}

export interface PlaceUpdateManyDataInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface UserUpdateOneRequiredWithoutListsInput {
  create?: Maybe<UserCreateWithoutListsInput>;
  update?: Maybe<UserUpdateWithoutListsDataInput>;
  upsert?: Maybe<UserUpsertWithoutListsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutListsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface UserUpsertWithoutListsInput {
  update: UserUpdateWithoutListsDataInput;
  create: UserCreateWithoutListsInput;
}

export interface ListUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface PlaceCreateInput {
  id?: Maybe<ID_Input>;
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  list?: Maybe<ListCreateOneWithoutPlacesInput>;
}

export interface ListCreateOneWithoutPlacesInput {
  create?: Maybe<ListCreateWithoutPlacesInput>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface ListCreateWithoutPlacesInput {
  id?: Maybe<ID_Input>;
  title: String;
  user: UserCreateOneWithoutListsInput;
}

export interface PlaceUpdateInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
  list?: Maybe<ListUpdateOneWithoutPlacesInput>;
}

export interface ListUpdateOneWithoutPlacesInput {
  create?: Maybe<ListCreateWithoutPlacesInput>;
  update?: Maybe<ListUpdateWithoutPlacesDataInput>;
  upsert?: Maybe<ListUpsertWithoutPlacesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ListWhereUniqueInput>;
}

export interface ListUpdateWithoutPlacesDataInput {
  title?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutListsInput>;
}

export interface ListUpsertWithoutPlacesInput {
  update: ListUpdateWithoutPlacesDataInput;
  create: ListCreateWithoutPlacesInput;
}

export interface PlaceUpdateManyMutationInput {
  sanityId?: Maybe<String>;
  name?: Maybe<String>;
  imageUrl?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<Float>;
  lng?: Maybe<Float>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  isEmailSubscriber?: Maybe<Boolean>;
  lists?: Maybe<ListCreateManyWithoutUserInput>;
}

export interface ListCreateManyWithoutUserInput {
  create?: Maybe<ListCreateWithoutUserInput[] | ListCreateWithoutUserInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
}

export interface ListCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  places?: Maybe<PlaceCreateManyWithoutListInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
  lists?: Maybe<ListUpdateManyWithoutUserInput>;
}

export interface ListUpdateManyWithoutUserInput {
  create?: Maybe<ListCreateWithoutUserInput[] | ListCreateWithoutUserInput>;
  delete?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  connect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  set?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  disconnect?: Maybe<ListWhereUniqueInput[] | ListWhereUniqueInput>;
  update?: Maybe<
    | ListUpdateWithWhereUniqueWithoutUserInput[]
    | ListUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ListUpsertWithWhereUniqueWithoutUserInput[]
    | ListUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  updateMany?: Maybe<
    ListUpdateManyWithWhereNestedInput[] | ListUpdateManyWithWhereNestedInput
  >;
}

export interface ListUpdateWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput;
  data: ListUpdateWithoutUserDataInput;
}

export interface ListUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  places?: Maybe<PlaceUpdateManyWithoutListInput>;
}

export interface ListUpsertWithWhereUniqueWithoutUserInput {
  where: ListWhereUniqueInput;
  update: ListUpdateWithoutUserDataInput;
  create: ListCreateWithoutUserInput;
}

export interface ListScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  OR?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
  NOT?: Maybe<ListScalarWhereInput[] | ListScalarWhereInput>;
}

export interface ListUpdateManyWithWhereNestedInput {
  where: ListScalarWhereInput;
  data: ListUpdateManyDataInput;
}

export interface ListUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  isEmailSubscriber?: Maybe<Boolean>;
}

export interface EmailSubscriberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailSubscriberWhereInput>;
  AND?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
  OR?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EmailSubscriberSubscriptionWhereInput[]
    | EmailSubscriberSubscriptionWhereInput
  >;
}

export interface ListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListWhereInput>;
  AND?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  OR?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
  NOT?: Maybe<ListSubscriptionWhereInput[] | ListSubscriptionWhereInput>;
}

export interface PlaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaceWhereInput>;
  AND?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
  OR?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
  NOT?: Maybe<PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface EmailSubscriber {
  id: ID_Output;
  email: String;
}

export interface EmailSubscriberPromise
  extends Promise<EmailSubscriber>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberSubscription
  extends Promise<AsyncIterator<EmailSubscriber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriberNullablePromise
  extends Promise<EmailSubscriber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberConnection {
  pageInfo: PageInfo;
  edges: EmailSubscriberEdge[];
}

export interface EmailSubscriberConnectionPromise
  extends Promise<EmailSubscriberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailSubscriberEdge>>() => T;
  aggregate: <T = AggregateEmailSubscriberPromise>() => T;
}

export interface EmailSubscriberConnectionSubscription
  extends Promise<AsyncIterator<EmailSubscriberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailSubscriberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscriberSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriberEdge {
  node: EmailSubscriber;
  cursor: String;
}

export interface EmailSubscriberEdgePromise
  extends Promise<EmailSubscriberEdge>,
    Fragmentable {
  node: <T = EmailSubscriberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailSubscriberEdgeSubscription
  extends Promise<AsyncIterator<EmailSubscriberEdge>>,
    Fragmentable {
  node: <T = EmailSubscriberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmailSubscriber {
  count: Int;
}

export interface AggregateEmailSubscriberPromise
  extends Promise<AggregateEmailSubscriber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscriberSubscription
  extends Promise<AsyncIterator<AggregateEmailSubscriber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface List {
  id: ID_Output;
  title: String;
}

export interface ListPromise extends Promise<List>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  places: <T = FragmentableArray<Place>>(args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface ListSubscription
  extends Promise<AsyncIterator<List>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  places: <T = Promise<AsyncIterator<PlaceSubscription>>>(args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface ListNullablePromise
  extends Promise<List | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  places: <T = FragmentableArray<Place>>(args?: {
    where?: PlaceWhereInput;
    orderBy?: PlaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface Place {
  id: ID_Output;
  sanityId?: String;
  name?: String;
  imageUrl?: String;
  slug?: String;
  lat?: Float;
  lng?: Float;
}

export interface PlacePromise extends Promise<Place>, Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  list: <T = ListPromise>() => T;
}

export interface PlaceSubscription
  extends Promise<AsyncIterator<Place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sanityId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
  list: <T = ListSubscription>() => T;
}

export interface PlaceNullablePromise
  extends Promise<Place | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
  list: <T = ListPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  isEmailSubscriber?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isEmailSubscriber: () => Promise<AsyncIterator<Boolean>>;
  lists: <T = Promise<AsyncIterator<ListSubscription>>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
  lists: <T = FragmentableArray<List>>(args?: {
    where?: ListWhereInput;
    orderBy?: ListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ListConnection {
  pageInfo: PageInfo;
  edges: ListEdge[];
}

export interface ListConnectionPromise
  extends Promise<ListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListEdge>>() => T;
  aggregate: <T = AggregateListPromise>() => T;
}

export interface ListConnectionSubscription
  extends Promise<AsyncIterator<ListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListSubscription>() => T;
}

export interface ListEdge {
  node: List;
  cursor: String;
}

export interface ListEdgePromise extends Promise<ListEdge>, Fragmentable {
  node: <T = ListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListEdgeSubscription
  extends Promise<AsyncIterator<ListEdge>>,
    Fragmentable {
  node: <T = ListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateList {
  count: Int;
}

export interface AggregateListPromise
  extends Promise<AggregateList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListSubscription
  extends Promise<AsyncIterator<AggregateList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaceConnection {
  pageInfo: PageInfo;
  edges: PlaceEdge[];
}

export interface PlaceConnectionPromise
  extends Promise<PlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaceEdge>>() => T;
  aggregate: <T = AggregatePlacePromise>() => T;
}

export interface PlaceConnectionSubscription
  extends Promise<AsyncIterator<PlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaceSubscription>() => T;
}

export interface PlaceEdge {
  node: Place;
  cursor: String;
}

export interface PlaceEdgePromise extends Promise<PlaceEdge>, Fragmentable {
  node: <T = PlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaceEdgeSubscription
  extends Promise<AsyncIterator<PlaceEdge>>,
    Fragmentable {
  node: <T = PlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlace {
  count: Int;
}

export interface AggregatePlacePromise
  extends Promise<AggregatePlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaceSubscription
  extends Promise<AsyncIterator<AggregatePlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EmailSubscriberSubscriptionPayload {
  mutation: MutationType;
  node: EmailSubscriber;
  updatedFields: String[];
  previousValues: EmailSubscriberPreviousValues;
}

export interface EmailSubscriberSubscriptionPayloadPromise
  extends Promise<EmailSubscriberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailSubscriberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailSubscriberPreviousValuesPromise>() => T;
}

export interface EmailSubscriberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscriberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailSubscriberPreviousValuesSubscription>() => T;
}

export interface EmailSubscriberPreviousValues {
  id: ID_Output;
  email: String;
}

export interface EmailSubscriberPreviousValuesPromise
  extends Promise<EmailSubscriberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface EmailSubscriberPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailSubscriberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ListSubscriptionPayload {
  mutation: MutationType;
  node: List;
  updatedFields: String[];
  previousValues: ListPreviousValues;
}

export interface ListSubscriptionPayloadPromise
  extends Promise<ListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListPreviousValuesPromise>() => T;
}

export interface ListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListPreviousValuesSubscription>() => T;
}

export interface ListPreviousValues {
  id: ID_Output;
  title: String;
}

export interface ListPreviousValuesPromise
  extends Promise<ListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ListPreviousValuesSubscription
  extends Promise<AsyncIterator<ListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType;
  node: Place;
  updatedFields: String[];
  previousValues: PlacePreviousValues;
}

export interface PlaceSubscriptionPayloadPromise
  extends Promise<PlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlacePreviousValuesPromise>() => T;
}

export interface PlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlacePreviousValuesSubscription>() => T;
}

export interface PlacePreviousValues {
  id: ID_Output;
  sanityId?: String;
  name?: String;
  imageUrl?: String;
  slug?: String;
  lat?: Float;
  lng?: Float;
}

export interface PlacePreviousValuesPromise
  extends Promise<PlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sanityId: () => Promise<String>;
  name: () => Promise<String>;
  imageUrl: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<Float>;
  lng: () => Promise<Float>;
}

export interface PlacePreviousValuesSubscription
  extends Promise<AsyncIterator<PlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sanityId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<Float>>;
  lng: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  isEmailSubscriber?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  isEmailSubscriber: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  isEmailSubscriber: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "List",
    embedded: false
  },
  {
    name: "Place",
    embedded: false
  },
  {
    name: "EmailSubscriber",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
